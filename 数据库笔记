#############################################################################################################################
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                               day1 RDBMS1
DB(DataBase)
数据库
DBMS()
数据库管理系统
DBS()
数据库系统即DB+DBMS

rm -f /etc/my.cinf
rm -rf /var/lib/mysql/*
rpm -e --nodeps mariadb-server mariadb.
安装数据库:#yum -y install mysql-community-*.rpm
          systemctl start mysqld
          systemctl enable mysqld
数据库存储在:/var/lib/mysql
查看进程:ps -C mysqld
查看端口:3306
错误日志文件:/var/log/mysqld.log
查看数据库密码并访问数据库服务: 
#grep password /var/log/mysqld.log
#mysql -hlocalhost -uroot -p'*Bc1hFVWWhnK'
修改数据库密码:
mysql> alter user root@"localhost" identified by "123qqq...A";
设置默认长度和密码长度 
0 长度
1 or MEDIUM  长度 数字 大小写 特殊字符
2 or STRONG  长度 数字 大小写 特殊字符 字典文件
mysql> show variables like "%password%";
mysql>set global validate_password_policy=0; 
mysql>set global validate_password_length=6；
修改数据库密码为:
mysql> alter user root@"localhost" identified by "tarena";
库管理命令:
      show databases;         显示库
      select user();          显示连接用户 
      use 库名;                     切换库
      select database();      显示当前所在的库
      create database 库名;      创建库
      show tables;            显示表
      drop database 库名;        删除库
创建库:库名 命名规则
   仅可以使用数字 字母 下划线 不能纯数字
   区分字母大小写 具有唯一性
   不可使用指令关键字 特殊字符
   例如:create database db1;
创建表:
create table 库名.表名(
   字段1 类型(宽度),
   字段2 类型(宽度),
)s;指定字符集
创建支持中文的表:create table 学生表2(姓名 char(10),年龄 int)DEFAULT CHARSET=utf8;
插入表数据:insert into 学生表2 values ("张三",88),("李四",70),("张翠山",30);
数据类型包括:
字符类型(char固定长度,最大存255个字符;varchar变长字符,65535个;大文本text/blob,图片/音频或视频)
数值类型(
整型正负 微小整型tinyint -128~127 小整形 smallint;
浮点型 单精度float 双精度double)
小数点整数5位,小数:create table t5 (name char(5),gz float(7,2));insert into t5 values("bob",99999.99);
日期时间型(日期时间datetime)
mysql> create table t7 (name char(5),your_start year,up_time time,birthday date,party datetime);
mysql> insert into t7 values ("bob",1990,083000,20191120,20190707213045);
mysql> insert into t7 values ("jerry",year(20190803),curtime(),curdate(),now());
mysql> insert into t7 values ("jerry",year(20190803),curtime(),curdate(),now());
枚举类型
enum 单选 只能选一个
set  多选 可以选多个
create table t10 (name char(10),sex enum("boy","girl","no"),likes set("eat","drink","game","happy"));
insert into t10 values ("bob","boy","eat,game");
select * from t10;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#######################################################################################################################
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                         day2 Mysql的键值 表字段处理 
一、字段类型约束条件:
         null 允许为空
         not null 不允许为null
         key 键值类型
         default 设置默认值
         extra 额外设置
   例子:create table db2.t2 (name char(10) not null default "",age tinyint unsigned default 19,sex enum("m","w") not null default "m");
二、表字段处理的一些基本语法结构:
                 add 添加字段
                 modify 修改字段类型
                 change 修改字段名
                 drop 删除字段
                 rename 修改表名

   2.1.修改表结构:
       命令 alter table 库名.表名 执行动作;
     2.1.1.执行动作:
          添加新字段 add:
            末尾  add 字段名 类型
              alter table db2.t1 add email varchar(50);
            某字段列尾   add 字段名 类型 [约束条件] after 字段名;
              alter table db2.t1 add likes set("eat","drink","game","happy") not null default "eat,drink" after age;
            某字段列首   add 字段名 类型 [约束条件] first
              alter table db2.t1 add class char(7) default "nsd1905" first;
      2.1.2.修改字段类型 modify:
               修改字段位置:alter table db2.t1 modify age tinyint unsigned default 19 after class;
               修改字段类型:alter table db2.t1 modify name varchar(15) not null default "";
      2.1.3.修改字段名为mail使用的命令是change:
            alter table db2.t1 change email mail varchar(40);
      2.1.4.删除表字段drop:
            alter table db2.t1 drop mail;
      2.1.5.修改表名rename:
            alter table db2.t1 rename db2.stuinfo;

三、什么是索引:类似与书的目录,对表中的字段排序.索引占表物理空间,降低了数据的维护速度.好处是加快数据的查询速度.
    3.1.普通索引:使用规则(显示MUL)
      3.1.1.建表时创建索引  格式create table 库.表(字段列表,index(字段名),index(字段名));
                             例子create table db2.t2(name char(10),age int,class char(7),email char(30),index(name),index(age));
      3.1.2.在已有的表里创建索引  格式create index 索引名 on 表名(字段名);  
                                    例子create index name on db2.stuinfo(name);
      3.1.3查看索引字段:  基本查看desc 表明;key列显示索引    详细查看索引:show index from 表名 \G竖着查看
                           查看表结构desc db2.t2;          竖着查看show index from db2.t2 \G;     
      3.1.4.删除索引:  格式drop index 索引名 on 库.表名   例子drop index age on db2.t2; 
四、主    键:
    4.1 什么是主键:不能赋空值,主键值不能允许重复,就是表里数据不能重复.
       4.1.1 建表时创建主键:         
                   create table t3(name char(10) primary key,age int);或
                   create table t4(name char(10),age int,primary key(name));
                   insert into t4 values("",19)
                        insert into t3 values ()
       4.1.2 在已有表里创建主键:alter table 表名 add primary key(字段名);
                   alter table db2.stuinfo add primary key(name);
       4.1.3 创建复合主键多列一起做主键,是且关系,多列不能同时重复:create table db2.t5(class char(7),name char(10),money enum("no","yes"),primary key(class,name));
                   insert into db2.t5 values("nsd1905","bob","yes");
        4.1.4 删除主键:alter table db2.t5 drop primary key;
        4.1.5 删除一个表数据,然后新增字段,添加复合主键:
                    alter table db2.t5 add stu_num char(9) first;
                    delete from db2.t5;
                    select * from db2.t5;
                    show tables;
                    desc db2.t5;
                    alter table db2.t5 add prinary key(stu_num,class,name);
          4.1.6 主键与auto_increment(自增长)连用:字符必须是数值且是主键里的字段自加1.
                    create table db2.t6(stu_num int primary key auto_increment,name char(10),age int); 
                    desc db2.t6;     
           4.1.7 添加主键字段自加1:
             alter table db2.stuinfo add id int primary key auto_increment first; 
             添加表数据:insert into stuinfo(class,age,name,likes,sex) values("nsd1906",19,"bob","eat,drink","m");                   

                   insert into db2.t6 values(null,"mm",20);

五、外    键foreign key:
     5.1 什么是外键:向一个表插入记录时,字段值在另一个表字段值范围内选择.
      使用规则:
               表存储引擎必须是innodb
               字段类型要一致
               被参照字段必须要是索引类型的一种(primary key)
      建表时创建外键:create table 库.表 (字段列表,foreign key(字段名) references 库,表(字段名) on update cascade on delete cascade)engine=innodb;
     5.2 创建一个员工参照表并添加员工:
      create table db2.ygb(yg_id int primary key auto_increment,name char(20),sex enum("boy","girl"))engine=innodb;
      insert into db2.ygb(name,sex) values("bob","boy");
      insert into db2.ygb(name,sex) values("lucy","girl");
      select * from db2.ygb
      创建参照的工资表:
        create table gzb(gz_id int, pay float(7,2), foreign key(gz_id) references ygb(yg_id) on update cascade on delete cascade)engine=innodb;
      查看创建工资表的命令:show create table gzb;
      工资表添加工资:insert into gzb values(1,10000);
                 insert into gzb values(2,20000);
      同步更新表id为8:update ygb set yg_id=8 where yg_id=2;
                  select * from ygb;
                  select * from gzb;
      同步删除id为8:delete from ygb where yg_id=8;
                select * from ygb;
                select * from gzb;
      设置主键:alter table gzb add primary key(gz_id);
      删除外键:
               show create table gzb;                    查看此处gzb_ibfk_1有个外键标识
               alter table gzb drop foreign key gzb_ibfk_1;
               show create table gzb;                    在查看外键标识就没有了
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#######################################################################################################################
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                         day3 RDBMS1 数据管理
一、数据导入导出
    1.1.数据导入与导出默认检索路径
       1.1.1.查看
              数据库下面查看
              模糊查看:mysql> show variables like "%file%";
              精确查看:mysql> show variables like "sevure_file_priv";
              数据导入导出的目录,默认是空的:mysql> system ls /var/lib/mysql-files/
       1.1.2.修改数据库导入导出默认位置的配置文件
           #vim /etc/my.cnf
                [mysqld]
                secure_file_priv="/myload"
                :wq
           #mkdir /myload
           #chown mysql /myload
           #systemctl restart mysqld
           #mysql -uroot -ptarena
              精确查看此文件下的默认默认路径是否改变:mysql> show variables like "sevure_file_priv";
    1.2.数据导入
       1.2.1.什么是数据导入:
             把系统文件内容存储到数据库服务器的表里
       1.2.2.命令格式
          mysql>load data infile "目录/文件名" into table 库.表 fields terminated by "符号" line terminated by "\n";
       1.2.3.例子 把系统用户信息/etc/passwd存储到db3库下的user表里
             导入步骤:
             1、建库:mysql> create database db3;
             2、建表:
          mysql> create table db3.user(
                  -> username char(50),
                  -> password char(1),
                  -> uid int,
                  -> gid int,
                  -> comment varchar(150),
                  -> homedir char(50),
                  -> shell char(50));
              3、导入:把文件导入到数据库修改之后的默认路径/myload下  mysql> system cp /etc/passwd /myload
              4、把数据导入到数据库表并查看表:
             mysql> load data infile "/myload/passwd" into table db3.user fields terminated by ":" lines terminated by "\n";
             mysql> select * from db3.user;  
              5、扩展添加序列号,在表第一列插入一列表序列号:(可通过主键字段自加1实现)
             mysql> alter table db3.user add id int primary key auto_increment first;      
    1.3.数据导出
       1.3.1.什么是数据导出?  
             把记录保存到系统文件里
       1.3.2.命令格式与例子
       1.select 查询命令 into outfile "目录/文件名";
           例子:mysql> select * from db3.user where id<=2 into outfile "/myload/user1.txt";
       2.select 查询命令 into outfile "目录/文件名" fields terminated by "分隔符";例子如3
         3.以":"为分隔符\n换行倒出:select 查询命令 into outfile "目录/文件名" fields terminated by "分隔符" lines terminated by "\n"; 
           例子:mysql> select username,homedir,shell from db3.user where id<=2 into outfile "/myload/user5.txt" fields terminated by ":" lines terminated by "\n";
                                                               
二、管理表记录 
  2.1 添加记录 insert into(新添加的记录追加在记录末尾)
      2.1.1 添加1条记录给所有列赋值
         格式:insert into 表名 values (字段值列表);
      2.1.2 添加多条记录给所有列赋值
         格式:insert into 表名 values (字段值列表),(字段值列表),(字段值列表);
      2.1.3 添加1条记录给指定的列赋值
         格式:insert into 表名(字段名列表) values (字段值列表);
         例子:insert into db3.user(username,password,uid,gid,comment,homedir,shell) values("yaya100","x","1000","1000","","/home/yaya100","/bin/bash");
      2.1.4 添加多条记录给指定的列赋值
         格式:insert into 表名(字段名列表) values (字段值列表) (字段值列表);
         例子:mysql> insert into db3.user(username,id) values(null,1001),("null",1002),("",1003);
  2.2 查询记录 select (字段是列,条件是行)
       格式:select 字段名列表 from 表名 [where 条件];
       例子:mysql> select username,uid from db3.user where id <= 10;
  2.3 更新记录 update(修改;记录字段的值)
       格式:update 库名.表名 set 字段名=值,字段名=值 [ where 条件 ];
       例子:mysql> update db3.user set password="A",comment="root";
  2.4 删除记录 delete (以行为单位删除)
       格式:delete from 库.表 [ where 条件 ]
       例子:mysql> delete from db3.user where username="yaya100";
三、匹配条件[ where 条件 ] select、update、delete 记录 操作
  3.1 基本匹配条件(适用于select、update、delete 记录 操作)
        3.1.1 数值比较(必须是数值比较) =、>、>=(大于等于)、<、<=(小于等于)、!=(不等于) 
         例如:select username,uid from db3.user where uid=gid;
        3.1.2 字符比较字符且要双引号 =、!=
         例如显示shell为/bin/bash的数据:select username from db3.user where shell = "/bin/bash";
                                   select username from db3.user where shell != "/bin/bash";      
        3.1.3 范围匹配(in 在..里..)(between 数字 and 数字 在...之间)(distinct 去重显示)
         例如:mysql> select username from db3.user where username in ("sync","daemon","apache","mysql");
           mysql> select username from db3.user where uid in (0,1,2);
           mysql> select username from db3.user where uid between 10 and 20;
           mysql> select distinct shell from db3.user;
        3.1.4 匹配空及非空(is null空)(is not null非空)
          例子查看名字为空和非空:mysql> select username from db3.user where username is null;
                          mysql> select username from db3.user where username is not null;
        3.1.5 逻辑匹配(or或)(and与)(!或not是非)
           例如:mysql> select username,uid from db3.user where username="root" and uid=1;
            mysql> select username,uid from db3.user where username="root" or uid=1;
  3.2 高级匹配条件(适用于select、update、delete 记录 操作)
       3.2.1 模糊查询 like
             '_'表示一个字符like '____'显示4个字符的名字
             '%'表示0~n个字符like '%a%';
         例如:mysql> select username from db3.user where username like '___';
           mysql> select username from db3.user where username like '%a%';
           mysql> select username from db3.user where username like '__%__';
       3.2.2 正则匹配 regexp  ^ $ . [] *
            例如:mysql> select username from db3.user where username regexp '[at]';
             mysql> select username from db3.user where username regexp '^[at]';
             mysql> select username from db3.user where username regexp '[0-9]';
            
       3.2.3 四则运算 +-*/%
             例如:mysql> update db3.user set uid=uid+1 where uid<=5;
              mysql> select username,uid,gid,(uid+gid)/2 pjz from db3.user;
              mysql> select username,uid from db3.user where uid%2=0;
  3.3 操作查询结果(对查询后的数据做处理) 
     3.3.1 聚集函数
       avg(字段名) 统计字段平均值
       sum 统计字段和
       min 统计字段最小值
       max 统计字段最大值
       count 统计字段个数
       例子:select min(uid) from db3.user;
         mysql> select max(uid) from db3.user;
         mysql> select sum(uid) from db3.user;
         mysql> select count(uid) from db3.user;
         mysql> select count(username) from db3.user where shell="/sbin/nologin";
         mysql> select min(uid) from db3.user where uid >=10 and uid<=20;
      3.3.2 查询结果排序
           升序:mysql> select username,uid from db3.user where uid <=1000 order by uid asc;
           降序:mysql> select username,uid from db3.user where uid <=1000 order by uid desc;
      3.3.3 查询结果分组 group by 字段名;
         mysql> select shell from db3.user where uid <=100 group by shell;
            与去重显示执行结果一样但是过程不一样
         mysql> select shell from db3.user where uid <=100 group by shell;
      3.3.4 查询结果过滤 having 条件; 速度快
         mysql> select username,uid from db3.user where username is not null having uid=3;
            或mysql> select username,uid from db3.user where username is not null and uid=3;这个是两个条件一起查找,没有上面的条件查找快.
      3.3.5 限制查询结果显示行数 limit
            1 只显示查询结果的前几行  limit 2
           mysql> select username,uid from db3.user where id <=10 limit 2;
            2 只显示查询结果指定范围内的行 limit 2,3;  2是显示的起始行,3是显示总行数. 
           mysql> select username,uid from db3.user where id <=10 limit 2,3;
四、MySQL管理工具
   4.1 连接mysql服务的方式
      命令行、使用软件连接、连接脚本(php python java)
   4.2 安装图形软件管理数据库服务器
      50上安装phpMyAdmin包软件
     # yum -y install httpd php php-mysql
     # systemctl restart httpd 
     # systemctl enable httpd
     [student@room9pc01~]$ scp /linux-soft/03/mysql/phpMyAdmin-2.11.11-all-languages.tar.gz root@192.168.4.50:/root/
     # tar -zxvf phpMyAdmin-2.11.11-all-languages.tar.gz 
     # mv phpMyAdmin-2.11.11-all-languages /var/www/html/phpmyad
     # cd /var/www/html/phpmyad/
     # cp config.sample.inc.php config.inc.php
     # vim +17 config.inc.php(或第31行)单引号随便写一点东西 
     然后真机登录 firefox http://192.168.4.50/phpmyad
      root/tarena
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
####################################################################################################################################
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                  day4 授权和备份
一、用户授权
    1.1 什么是用户授权
        在数据库服务器上添加新的连接用户,在添加用户时可以设置访问权限及连接密码.默认数据库管理员root用户本机登陆有授权权限.
    1.2 命令格式
      grant 授权列表 on 库名 to 用户名@"客户端地址" identifited by "密码";
        权限列表:all、usage、select update insert、select update(字段1...字段N)
        库名:*.*(所有库所有表) 库名.*(一个库) 库名.表名(一张表)
        用户名:授权时自定义要有标识性,存储在mysql库的user表里
        客户端地址:%、192.168.4.%、192.168.4.1、localhost
    1.3 授权例子:服务端:grant all on *.* to mydba@"%" identified by "123qqq...A" with grant option;
                 客户端:mysql -h192.168.4.50 -umydba -p"123qqq...A" 
                 (扩展:information_schema是虚拟库只有看权限,内存库映射出来的虚拟库.)
    1.4 相关命令
              select user();                             显示当前登陆的用户名及客户端地址
              show grants;                               登录用户显示自身访问权限
              show grants for 用户名@"客户端地址";             显示管理员已授权的用户权限
                  例子:mysql> show grants for yaya@"localhost";
              set password=password("密码");              授权用户连接后修改连接密码
                  例子:mysql> set password=password("tarena");
              set password for 用户名@"客户端地址"=password(密码); 管理员重置授权用户连接密码
                  例子:mysql> set password for mydba@"%"=password("123qqq...A");
              drop user 用户名@"客户端地址"                      删除授权用户(必须有管理员权限)
                  例子:mysql> drop user yaya@"localhost";
    1.5 授权库mysql(记录授权信息mysql库的管理)可以查看表记录,查看到授权用户的授权信息,也可以通过修改记录,修改用户的权限
      1.5.1 user表(记录已有的授权用户及权限)
             查看:mysql> desc mysql.user;
              mysql> select host,user from user;
              mysql> select * from  user where host="%" and user="mydba" \G;
      1.5.2 db表   (记录已有授权用户对数据库的访问权限)
             查看:mysql> desc mysql.db;
              mysql> select host,db,user from db;
              mysql> select * from mysql.db where host="localhost" and db="db3" and user="admin2" \G;
                  修改库权限:mysql> update mysql.db set  Update_priv="N",Delete_priv="N" where host="localhost" and db="db3" and user="admin2";
                  刷新生效:mysql> flush privileges;
                  查看授权:mysql> show grants for admin2@"localhost";
             修改权限:同上 1.5.1
      1.5.3 tables_priv表(记录已有授权用户对表的访问权限)
             查看:mysql> desc tables_priv;
              mysql> select * from mysql.tables_priv;
              mysql> select * from mysql.tables_priv where db="db3" and table_name="user"\G;
              mysql> show grants for admin@"192.168.4.0/24";
             修改表权限:  
      1.5.4 columns_priv表(记录已有授权用户对字段的访问权限)
            添加一个用户对字段有权限:mysql> grant select,update(uid) on db3.user to yaya99@"%" identified by "123456";
             查看:mysql> desc mysql.columns_priv;
              mysql> select * from mysql.columns_priv;

    1.6 撤销授权 (删除已有授权用户的权限)撤销with grant option授权的权限以及其他权限
        格式:revoke 权限列表 on 库名.表 from 用户名@"客户地址";
        例子:mysql> select host,user from mysql.user;   
          mysql> show grants for mydba@"%";
          mysql> revoke grant option on *.* from mydba@"%";   删除在此用户下授权功能
          mysql> show grants for mydba@"%";

          mysql> revoke delete on *.* from mydba@"%";         删除授权过的删除权限
          mysql> show grants for mydba@"%";

          mysql> revoke all on *.* from mydba@"%";            删除授权的所有权限
          mysql> show grants for mydba@"%";
    1.7 删除授权用户
          mysql> drop user mydba@"%";
          mysql> select host,user from mysql.user;
    1.8 管理root密码
        1.8.1 恢复密码
        #systemctl stop mysqld
        vim /etc/my.cnf
          [mysqld]
             skip-grant-tables
             #validate_password_policy=0
             #validate_password_length=6
        #systemctl start mysqld              跳过密码启动服务程序
        #mysql
        mysql> desc mysql.user;
        mysql> select host,user,authentication_string from mysql.user;
        mysql> update mysql.user set authentication_string=password("A...qqq321") where host="localhost" and user="root";   修改密码
        mysql> flush privileges; 
        #systemctl stop mysqld
        vim /etc/my.cnf
          [mysqld]
             #skip-grant-tables
             validate_password_policy=0
             validate_password_length=6
        #systemctl start mysqld 
        #mysql -hlocalhost -uroot -pA...qqq321
          然后重启在恢复.
        1.8.2 修改密码(重置密码)
            #mysqladmin -hlocalhost -uroot -p password "123456"
               #旧密码
二、完全备份
    2.1 数据备份目的  数据丢失或损坏,可以使用
    2.2 数据备份方式
           物理备份冷备50
         #cp -r /var/lib/mysql /root/mysql.bak
         #tar -zcvf /root/mysql.tar.gz /var/lib/mysql
         #scp -r /root/mysql.bak root@192.168.4.51:/opt/
           物理恢复51
         #ss -anptu | grep 3306
         #systemctl stop mysqld
         #ss -anptu | grep 3306
         #rm -rf /var/lib/mysql
         #cp -r /root/mysql.bak/ /var/lib/mysql
         #chown -R mysql:mysql /var/lib/mysql
         #systemctl start mysqld
           
        逻辑备份  使用软件自带备份程序(备份命令)对数据做备份,在执行备份命令时,会根据已有的数据生成对应的命令,把命令存放到指定的备份文件里.
                  恢复时,执行备份文件里的命令恢复数据
                    
    2.3 数据备份策略
        完全备份:备份所有数据(可以是1张表、1个库、1台服务器)
        增量备份:只备份新产生数据,备份上次备份后,所有新产生的数据
        差异备份:只备份新产生数据,备份完全备份后,所有新产生的数据
       
    2.4 完全备份-----mysqldump命令
        --all-databases 或 -A     所有库
          数据库名                        单个库  db3
          数据库名 表名                   单张表  db3 user
        -B 库名 库名                   多个库  -B db1 db2 db3 
        格式:#mysqldump -uroot -p密码 库名 > 目录/xxx.sql
        例子:#mysqldump -uroot -ptarena --all-databases > /mybak/alldb.sql
          #mysqldump -uroot -ptarena db1 > /mybak/db1.sql
          #mysqldump -uroot -ptarena db3 user > /mybak/db3_user.sql
          #mysqldump -uroot -ptarena -B db1 db3 > /mybak/twodb.sql
    2.5 完全恢复-----mysql命令
        格式:#mysql -uroot -p密码 库名 < 目录/xxx.sql
        例子:#scp /mybak/db1.sql root@192.168.4.51:/root/
          #mysql -uroot -ptarena db1 < /root/db1.sql     注意:导入一个库或者一个表需要先创建这个库

          #mysql -uroot -ptarena < /root/twodb.sql           导入多个库和all不需要先创建库
三、增量备份  备份上次备份后,所有新产生的数据(使用mysql服务的binlog日志实现数据的增量备份与恢复)
   3.1 binlog日志的使用
        3.1.1 什么是binlog日志
             也称做二进制日志
          MySQL服务日志文件的一种
             记录除查询之外的所有SQL命令
             可用于数据备份和恢复
             配置mysql主从同步的必要条件  
         3.1.2 启用日志
           3.1.2.1 默认路径
           #vim /etc/my.cnf
               [mysql]
               server_id=50
               log_bin
           #systemctl restart mysqld 
              查看mysql>show master status       
             日志文件存放在#ls /varlib/mysql/host50* (/var/lib/mysql/host50-bin.000001  /var/lib/mysql/host50-bin.index 是索引存放日志的名称)
           3.1.2.2 自定义日志存储目录和日志文件名
           #mkdir /mylog           #创建自定义路径
           #chown mysql /mylog     #给权限
           #vim /etc/my.cnf
               [mysql]
               server_id=50
               log_bin=/mylog/lh     #自定义路径
           #systemctl restart mysqld
           #ls /mylog
              查看mysql>show master status                
         3.1.3 手动创建新的binlog日志文件
               #systemctl restart mysql
               mysql>flush logs
               或者#mysql -uroot -ptarena -e "flush logs"
               #mysqldump --flush-logs  做完备份之后在刷新一下生成的binlog日志文件
                   查看mysql>show master status
         3.1.4 删除已有的binlog日志
                删除4之前的binlog日志文件
                mysql> purge master logs to "lh.000004";
                删除所有binlog日志内容
               mysql> reset master;
         3.1.5 查看binlog日志内容   偏移量记录日志文件
            3.1.5.1 查看binlog日志内容 命令行查看
                #mysqlbinlog /mylog/lh.000001
                mysql> show master status;
            3.1.5.2 修改日志格式
                host50# scp /mylog/lh.000001 root@192.168.4.51:/root/
                   恢复数据:host51# mysql -uroot -ptarena -e "select count(*) from db3.user"
                            #mysqlbinlog /root/lh.000001 | mysql -uroot -ptarena 
                            #mysql -uroot -ptarena -e "select count(*) from db3.user"
                    修改日志记录格式:
                          三种记录方式
                           statement 报表模式
                           row 行模式
                           mixed 混合模式
                     #mysql -uroot -ptarena -e "show variables like 'binlog_format'"
                           
                           
            3.1.5.3 日志文件如何区分记录的多条sql命令
                       偏移量和时间点
                       命令格式:
                          偏移量
                           --start-position=1054 --stop-position=2098
                          时间点
                           --start-datetime="yyyy-mm-dd hh:mm:ss" --stop-datetime="yyyy-mm-dd hh:mm:ss"
    3.2 使用binlog日志恢复指定范围内的数据
        mysql> insert into db3.user(username) values("aliceA");
        mysql> insert into db3.user(username) values("aliceB");
        mysql> delete from db3.user where username like 'alice%';
        mysql> show master status;
        mysql> exit
        #mysqlbinlog /mylog/lh.000001 | grep -i delete
          
        host50# scp /mylog/lh.000001 root@192.168.4.51:/opt/
       
        host51#mysqlbinlog /opt/lh.000001
        host51#mysql -uroot -ptarena -e "select username from db3.user where username like 'alice%'"
        host51#mysqlbinlog --start-position=325 --stop-position=790 /opt/lh.000001 | mysql -uroot -ptarena
        host51#mysql -uroot -ptarena -e "select username from db3.user where username like 'alice%'"    

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
####################################################################################################################################
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                  day5 percona软件和innobackupex备份与恢复
以上学习备份的缺点:
物理备份:
         跨平台性差
         备份时间长、冗余备份、浪费存储空间
mysqldump备份缺点:
         效率较低、备份和还原速度慢、锁表
                  

1、percona软件介绍
  1.1 percona软件介绍
   1.2 安装软件
        安装两个包:
        #rpm -ivh libev-4.15-1.el6.rf.x86_64.rpm
        #yum -y install percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm 
   1.3 命令格式   完全备份和完全恢复
      --host    --user  --port  --password  --databases  --no-timestamp
      --redo-only --apply-log --copy-back                        完全备份 
      --incremental 目录名  --incremental-basedir=目录名 --incremental-dir=目录名  --export import  增量备份
     #innobackupex [选项] 
      完全备份格式:innobackupex --user 用户名 --passwoed 密码 备份目录名 --no-timestamp
               #innobackupex --user root --password tarena /allbak --no-timestamp
               #scp -r /allbak/ root@192.168.4.51:/root/
      完全恢复格式:  --aapply-log 目录名   准备恢复数据
                 --copy-back 目录名   恢复数据
      
      例子步骤如下:
         完全备份:
       host50#innobackupex --user root --password tarena /allbak --no-timestamp
       host50#scp -r /allbak/ root@192.168.4.51:/root/
         完全恢复:
            1 停止数据库服务器
            2 清空数据库目录
            3 准备恢复数据
            4 拷贝数据
            5 修改数据库目录的所有者和组用户为mysql
            6 启动服务
            7 管理员登录查看数据
      100   systemctl stop mysqld
      101  cd /var/lib/mysql
      102  ls
      103  rm -rf *
      104  ls
      105  innobackupex --apply-log /root/allbak/       准备恢复数据                
      106  innobackupex --copy-back /root/allbak/       开始恢复数据
      107  ls -ld /var/lib/mysql
      108  ls -l /var/lib/mysql
      109  chown -R mysql:mysql /var/lib/mysql          给所有者和组为mysql
      110  ls -l /var/lib/mysql
      113  systemctl start mysqld
      114  ss -anptu | grep 3306
        查看存储引擎mysql> show engines;
    
    1.4 恢复单张表 (.frm 存储表结构    .ibd 存储表数据表空间文件)
        具体操作如下:
                   1 删除表空间      alter table 库名.表名 discard tablespace
                   2 导出表信息      innobackupex --apply-log --export 数据完全备份目录
                   3 拷贝表信息文件到数据库目录下  
                   4 修改表信息文件的所有者及组用户为mysql
                   5 导入表空间
                   6 删除数据库目录下的表信息文件
                   7 查看表记录
          1 mysql> alter table db5.b discard tablespace;
          2 #innobackupex --apply-log --export /root/allbak/
          3 #cp /root/allbak/db5/b.{cfg,exp,ibd} /var/lib/mysql/db5/
          4 #chown -R mysql:mysql /var/lib/mysql/db5/b.*
          5 mysql> alter table db5.b import tablespace;
            mysql> select * from db5.b;
          6 #rm -rf /var/lib/mysql/db5/b.cfg
            #rm -rf /var/lib/mysql/db5/b.exp 
          7 mysql> select * from db5.b;
    
    1.5 innobackupex增量备份与恢复
          首次备份:做完全备份
        #cat /allbak/xtrabackup_checkpoints
         
           增量备份格式:#innobackupex --user 用户名 --password 密码 --incremental 增量目录 --incremental-basedir=目录名 --no-timestamp
           增量恢复格式:#innobackupex --apply-log --redo-only 目录名 --incremental-dir=增量目录
                   #innobackupex --copy-back 目录名
         
          例子:增量备份
           host50#innobackupex --user root --password tarena /allbak --no-timestamp
           host50#innobackupex --user root --password tarena --incremental /new1dir --incremental-basedir=/allbak --no-timestamp
           host50#innobackupex --user root --password tarena --incremental /new2dir --incremental-basedir=/new1dir --no-timestamp
              
           host50#scp -r /allbak/ root@192.168.4.51:/opt
           host50#scp -r /new1dir/ root@192.168.4.51:/opt
           host50#scp -r /new2dir/ root@192.168.4.51:/opt
               
              增量恢复
           host51#innobackupex --apply-log --redo-only /opt/allbak/                                 准备恢复数据合并数据
           host51#innobackupex --apply-log --redo-only /opt/allbak/ --incremental-dir=/opt/new1dir  与new1合并,增量数据也会合allbak上
           host51#innobackupex --apply-log --redo-only /opt/allbak/ --incremental-dir=/opt/new2dir  与new2合并,增量数据也会合allbak上      
           host51#systemctl stop mysqld
           host51#rm -rf /var/lib/mysql/*
           host51#innobackupex --copy-back /opt/allbak/           
           host51#chown -R mysql:mysql /var/lib/mysql/
           host51#systemctl start mysqld
           host51#ss -anptu | grep 3306
      验证    host51#mysql -uroot -ptarena
      查库    mysql> show databases; 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
####################################################################################################################################
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                  day5 主从同步   ftp://172.40.50.117/2019/homework/
 






